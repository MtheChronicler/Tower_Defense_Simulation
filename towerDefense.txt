import kotlin.math.sqrt


val deltaT: Double = 0.01
// val sim_time: Int = 10
// val sim_ticks: Int = (sim_time/deltaT).toInt()
var ticks: Int = 0


fun subtract(a: Int, b: Int): Int{
    if (a <= b)
    	return 0
    return a-b
}

fun areEnemiesOutOfRange(): Boolean{
    var furthestTowerRange: Double = 0.0
    var closestEnemy: Double = 10000.0
    for(enemy in enemyList.getList()){
    	if(enemy.x < closestEnemy && enemy.isAlive){
            closestEnemy = enemy.x
        }
    }
    for(tower in towerList.getList()){
        if(tower.x + tower.range > furthestTowerRange){
        	furthestTowerRange = tower.x + tower.range
        }
    }
    if(furthestTowerRange < closestEnemy){
        return true
    } else {
        return false
    }
}

open class Entity(var x:Double, var y:Double){
    
    fun distanceFrom(entity: Entity): Double{
        return sqrt((x-entity.x)*(x-entity.x) + (y-entity.y)*(y-entity.y))
    }
}


open class Enemy(x: Double, y: Double, var hp: Int, val armor: Int, val speed: Double): Entity(x, y){
    
    var isAlive: Boolean = true
    
    val baseHp: Int = hp
    
    fun move(){
        if (isAlive)
        	x += speed * deltaT
        else
        	print("Enemy can't move bacause it's dead")
    }
    
    fun takeDmg(dmg: Int){
        hp = subtract(hp,subtract(dmg,armor))
        if (hp == 0){
            isAlive = false
            enemyList.remove(this)
        }
    }
    
    fun printStatus(){
        println("Alive: $isAlive, Position: ($x, $y), Health: $hp")
    }
}


open class Tower(x: Double, y: Double, var dmg: Int, val fireRate: Double, val range: Double, val targeting: String = "default"): Entity(x, y){
    
    var currentTarget: Enemy? = null
    
    var lastTimeFired: Int? = null
    
    val fireInterval: Double = 1 / (deltaT * fireRate)
    
    fun isInRange(enemy: Enemy): Boolean{
        if (distanceFrom(enemy) <= range)
        	return true
        else
        	return false
    }
    
    fun target(){
        //default - targets currentTarget if available, else sets a random enemy as currentTarget
        //random - targets a random enemy
        //closest - targets closest enemy
        //strongest - target enemy with the most hp
        //weakest - targets enemy with the least hp
        if(currentTarget != null){
            if(currentTarget!!.isAlive == false || !isInRange(currentTarget!!)){
                currentTarget = null
            }
        }
        when(targeting){
            "default" -> {
                if(currentTarget == null){
                    var tempList: MutableList<Enemy> = mutableListOf()
                    for(enemy in enemyList.getList()){
                        if(isInRange(enemy)){
                            tempList.add(enemy)
                        }
                    }
					if(tempList.size > 0)
                		currentTarget = tempList.random()
                    tempList.clear()
                }
            }
            "random" -> {
                var tempList: MutableList<Enemy> = mutableListOf()
                for(enemy in enemyList.getList()){
                    if(isInRange(enemy)){
                        tempList.add(enemy)
                    }
                }
				if(tempList.size > 0)
                	currentTarget = tempList.random()
                tempList.clear()
            }
            "closest" -> {
                var shortestDist: Double
                if(currentTarget != null){
                    shortestDist= distanceFrom(currentTarget!!)
                } else {
                    shortestDist = 2_000_000_000.0
                }
                for(enemy in enemyList.getList()){
                    if(isInRange(enemy)){
                        if(distanceFrom(enemy) < shortestDist){
                            currentTarget = enemy
                            shortestDist = distanceFrom(currentTarget!!)
                        }
                    }
                }
            }
            "strongest" -> {
                var mostHp: Int
                if(currentTarget != null){
                    mostHp = currentTarget!!.baseHp
                } else {
                    mostHp = 0
                }
                for(enemy in enemyList.getList()){
                    if(isInRange(enemy)){
                        if(enemy.baseHp > mostHp){
                            currentTarget = enemy
                            mostHp = currentTarget!!.baseHp
                        }
                    }
                }
            }
            "weakest" -> {
                var leastHp: Int
                if(currentTarget != null){
                    leastHp = currentTarget!!.baseHp
                } else {
                    leastHp = 2_000_000_000
                }
                for(enemy in enemyList.getList()){
                    if(isInRange(enemy)){
                        if(enemy.baseHp < leastHp){
                            currentTarget = enemy
                            leastHp = currentTarget!!.baseHp
                        }
                    }
                }
            }
        }
    }
    
    fun fire(){
        target()
        if(lastTimeFired == null){
            if(currentTarget != null){
                currentTarget!!.takeDmg(dmg)
                lastTimeFired = ticks
            }
        } else if(ticks - lastTimeFired!! >= fireInterval){
            if(currentTarget != null){
                currentTarget!!.takeDmg(dmg)
                lastTimeFired = ticks
            }
        }
    }
}


class EnemyList(){
    private var theList: MutableList<Enemy> = mutableListOf()
    
    fun getList(): List<Enemy>{
        return theList
    }
    
    fun add(enemy: Enemy){
        theList.add(enemy)
    }
    
    fun remove(enemy: Enemy){
        theList.remove(enemy)
    }
    
    fun getEnemy(id: Int): Enemy{
        return theList[id]
    }
    
    fun getRandom(): Enemy{
        return theList.random()
    }
    
    fun enemiesLeft(): Int{
        var counter: Int = 0
        for(enemy in theList){
            if(enemy.isAlive)
            	counter++
        }
        return counter
    }
    
    fun hpLeft(): Int {
        var counter: Int = 0
        for(enemy in theList){
            counter += enemy.hp
        }
        return counter
    }
    
    fun avgHpLeft(): Float {
        return (hpLeft()/enemiesLeft()).toFloat()
    }
    
    fun moveAll(){
        for(enemy in theList){
            if(enemy.isAlive){
                enemy.move()
            }
        }
    }
    
    fun printInfo(full: Boolean = false){
        if(full){
            for(enemy in theList){
                enemy.printStatus()
            }
        } else {
        println("Enemies left: " + enemiesLeft())
        println("Enemy HP left: " + hpLeft())
        println("Average HP per enemy left: " + avgHpLeft())
        }
    }
}


class TowerList(){
    private var theList: MutableList<Tower> = mutableListOf()
    
    fun getList(): List<Tower>{
        return theList
    }
    
    fun add(tower: Tower){
        theList.add(tower)
    }
    
    fun getTower(id: Int): Tower{
        return theList[id]
    }
    
    fun fireAll(){
        for(tower in theList){
            tower.fire()
        }
    }
}


class HeavyEnemy(): Enemy(x=0.0, y=0.0, hp=1000, armor=100, speed=0.5){}
class LightEnemy(): Enemy(x=0.0, y=0.0, hp=100, armor=0, speed=2.5){}

class HeavyTower(x: Double, targeting: String = "default"): Tower(x=x,y=0.0,dmg=500,fireRate=0.1,range=10.0, targeting=targeting){}
class LightTower(x: Double, targeting: String = "default"): Tower(x=x,y=0.0,dmg=20,fireRate=10.0,range=2.0, targeting=targeting){}

val enemyList: EnemyList = EnemyList()
val towerList: TowerList = TowerList()


fun main() {    
    for(i in 1..2){
        enemyList.add(HeavyEnemy())
    }
    for(i in 1..10){
        enemyList.add(LightEnemy())
    }
    towerList.add(LightTower(x=5.0, targeting="weakest"))
    towerList.add(LightTower(x=6.0, targeting="weakest"))
    towerList.add(HeavyTower(x=20.0, targeting="strongest"))
    var prevHpLeft: Int = enemyList.hpLeft()
    while(!areEnemiesOutOfRange()){
    	enemyList.moveAll()
        towerList.fireAll()
        if(prevHpLeft != enemyList.hpLeft()){
            print("Timestamp: ")
            print(ticks*deltaT)
            println(" s")
            enemyList.printInfo()
            println()
        }
        prevHpLeft = enemyList.hpLeft()
        ticks += 1
	}
    enemyList.printInfo(full=true)
}